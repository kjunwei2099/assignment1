
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Kwan Jun Wei
 */
public class jDashboard extends javax.swing.JFrame {
    private String role="";
    private String username;
    private String password;
    private String address;
    private String postcode;
    private String city;
    private String state;
    /**
     * Creates new form jDashboard
     */
    public jDashboard() {
        initComponents();
        configuration();     
    }
    
    public void setRole(String role){
        this.role = role;
    }
    
    public void setUsername(String username){
        this.username = username;
    }
 
    public void configuration(){
        if(role.equals("customer"))
        {
            jTabbedPane1.add("Cart",panelCart);
            jTabbedPane1.add("Order History",panelHistory); 
            jTabbedPane1.add("Profile",panelProfile);
            lblWelcome.setText("Welcome Back "+username+"!");
            btnCartRefreshTable.doClick();
            btnPurchaseHistoryRefresh.doClick();
            ArrayList<String> lines = cFileHandling.readFile("userInfo.txt");
            for (String eachString: lines){
                Scanner sc = new Scanner(eachString).useDelimiter(";");
                String tempRole = sc.next();
                String tempUsername = sc.next();
                String tempPassword = sc.next();
                try
                {
                    String tempAddress = sc.next();
                    String tempPostcode = sc.next();
                    String tempCity = sc.next();
                    String tempState = sc.next();
                    if(tempUsername.equals(username))
                    {
                        this.password=tempPassword;
                        this.address=tempAddress;
                        this.postcode=tempPostcode;
                        this.city=tempCity;
                        this.state=tempState;

                        lblUsername.setText(username);
                        txtAddress.setText(address);
                        txtPostcode.setText(postcode);
                        txtCity.setText(city);
                        txtState.setText(state);
                        break;
                    }
                }
                catch(Exception e){}
            }
        }
        else
        {
            jTabbedPane1.remove(panelCart);
            jTabbedPane1.remove(panelHistory); 
            jTabbedPane1.remove(panelProfile); 
        }
        btnShopLoadTable.doClick();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelShop = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableShop = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtShopSearch = new javax.swing.JTextField();
        btnShopCart = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btnShopLoadTable = new javax.swing.JButton();
        lblShopStatus = new javax.swing.JLabel();
        spinnerShopQuantity = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        lblWelcome = new javax.swing.JLabel();
        panelCart = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        btnCartPay = new javax.swing.JButton();
        btnCartRemove = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        spinnerCartQuantity = new javax.swing.JSpinner();
        btnCartRefreshTable = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnCartEdit = new javax.swing.JButton();
        lblCartStatus = new javax.swing.JLabel();
        lblCartItemName = new javax.swing.JLabel();
        panelHistory = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablePurchaseHistory = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        btnPurchaseHistoryRefresh = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtFeedback = new javax.swing.JTextArea();
        comboSelectID = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        btnSubmitFeedback = new javax.swing.JButton();
        lblFeedbackStatus = new javax.swing.JLabel();
        panelProfile = new javax.swing.JPanel();
        btnProfileLogout = new javax.swing.JButton();
        btnProfileEdit = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lblUsername = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        txtNewPassword = new javax.swing.JPasswordField();
        txtNewPassword2 = new javax.swing.JPasswordField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        lblProfileStatus = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPostcode = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        txtState = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tableShop.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category Name", "Item Name", "Price", "Stock Left"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableShop);

        jLabel1.setText("Filter By");

        txtShopSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtShopSearchActionPerformed(evt);
            }
        });
        txtShopSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtShopSearchKeyPressed(evt);
            }
        });

        btnShopCart.setText("Add to Cart");
        btnShopCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShopCartActionPerformed(evt);
            }
        });

        jLabel8.setText("Quantity :");

        btnShopLoadTable.setText("Load Table");
        btnShopLoadTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShopLoadTableActionPerformed(evt);
            }
        });

        lblShopStatus.setText("Status: ");

        spinnerShopQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, 9, 1));

        jLabel6.setText("Search Item");

        lblWelcome.setText("Welcome Back!");

        javax.swing.GroupLayout panelShopLayout = new javax.swing.GroupLayout(panelShop);
        panelShop.setLayout(panelShopLayout);
        panelShopLayout.setHorizontalGroup(
            panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShopLayout.createSequentialGroup()
                        .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtShopSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addComponent(jScrollPane1)
                    .addGroup(panelShopLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelShopLayout.createSequentialGroup()
                                .addComponent(lblShopStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 1258, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 26, Short.MAX_VALUE))
                            .addGroup(panelShopLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(spinnerShopQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnShopCart)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnShopLoadTable, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        panelShopLayout.setVerticalGroup(
            panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShopLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShopLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(2, 2, 2)
                        .addComponent(txtShopSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelShopLayout.createSequentialGroup()
                        .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelShopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnShopCart)
                        .addComponent(jLabel8)
                        .addComponent(spinnerShopQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnShopLoadTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 112, Short.MAX_VALUE)
                .addComponent(lblShopStatus)
                .addGap(34, 34, 34))
        );

        jTabbedPane1.addTab("Shop", panelShop);

        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableCart);

        jLabel12.setText("Your Cart");

        btnCartPay.setText("Pay");
        btnCartPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartPayActionPerformed(evt);
            }
        });

        btnCartRemove.setText("Remove From Cart");
        btnCartRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartRemoveActionPerformed(evt);
            }
        });

        jLabel5.setText("Edit Quantity");

        spinnerCartQuantity.setModel(new javax.swing.SpinnerNumberModel(1, 1, 9, 1));

        btnCartRefreshTable.setText("Refresh");
        btnCartRefreshTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartRefreshTableActionPerformed(evt);
            }
        });

        btnCartEdit.setText("Edit");
        btnCartEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCartEditActionPerformed(evt);
            }
        });

        lblCartStatus.setText("Status :");

        javax.swing.GroupLayout panelCartLayout = new javax.swing.GroupLayout(panelCart);
        panelCart.setLayout(panelCartLayout);
        panelCartLayout.setHorizontalGroup(
            panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(panelCartLayout.createSequentialGroup()
                .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCartLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(panelCartLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel12)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelCartLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spinnerCartQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCartItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 9, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCartEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1069, 1069, 1069))
                    .addGroup(panelCartLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(lblCartStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCartLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCartLayout.createSequentialGroup()
                                .addComponent(btnCartRemove)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCartRefreshTable))
                            .addComponent(btnCartPay, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        panelCartLayout.setVerticalGroup(
            panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelCartLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCartRefreshTable)
                    .addComponent(btnCartRemove))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelCartLayout.createSequentialGroup()
                        .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCartItemName, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                            .addGroup(panelCartLayout.createSequentialGroup()
                                .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelCartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(spinnerCartQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                    .addComponent(btnCartEdit))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(75, 75, 75)
                        .addComponent(btnCartPay)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelCartLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblCartStatus)
                        .addGap(46, 46, 46))))
        );

        jTabbedPane1.addTab("Cart", panelCart);

        tablePurchaseHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date", "Order ID", "Item Name", "Price", "Quantity", "Total Price", "Delivery Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tablePurchaseHistory);

        jLabel14.setText("Purchased History");

        btnPurchaseHistoryRefresh.setText("Refresh");
        btnPurchaseHistoryRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPurchaseHistoryRefreshActionPerformed(evt);
            }
        });

        jLabel10.setText("Feedback");

        txtFeedback.setColumns(20);
        txtFeedback.setRows(5);
        jScrollPane4.setViewportView(txtFeedback);

        jLabel11.setText("Select Order ID to give feedback");

        btnSubmitFeedback.setText("Submit");
        btnSubmitFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitFeedbackActionPerformed(evt);
            }
        });

        lblFeedbackStatus.setText("Status :");

        javax.swing.GroupLayout panelHistoryLayout = new javax.swing.GroupLayout(panelHistory);
        panelHistory.setLayout(panelHistoryLayout);
        panelHistoryLayout.setHorizontalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHistoryLayout.createSequentialGroup()
                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHistoryLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1293, Short.MAX_VALUE)
                            .addGroup(panelHistoryLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboSelectID, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(961, 961, 961)
                                .addComponent(btnPurchaseHistoryRefresh))
                            .addGroup(panelHistoryLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(panelHistoryLayout.createSequentialGroup()
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelHistoryLayout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(jLabel14))
                            .addGroup(panelHistoryLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelHistoryLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSubmitFeedback))
                                    .addGroup(panelHistoryLayout.createSequentialGroup()
                                        .addGap(148, 148, 148)
                                        .addComponent(lblFeedbackStatus)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelHistoryLayout.setVerticalGroup(
            panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHistoryLayout.createSequentialGroup()
                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelHistoryLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblFeedbackStatus))
                    .addGroup(panelHistoryLayout.createSequentialGroup()
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelHistoryLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPurchaseHistoryRefresh)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelHistoryLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboSelectID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)))
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelHistoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSubmitFeedback))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Purchase History", panelHistory);

        btnProfileLogout.setText("Logout");
        btnProfileLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileLogoutActionPerformed(evt);
            }
        });

        btnProfileEdit.setText("Edit Profile");
        btnProfileEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfileEditActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Profile");

        jLabel18.setText("Username");

        jLabel19.setText("Password");

        jLabel20.setText("New Password");

        jLabel21.setText("New Password Confirmation");

        jLabel26.setText("Address :");

        jLabel22.setText("Postcode :");

        jLabel23.setText("City :");

        jLabel24.setText("State :");

        lblProfileStatus.setText("Status :");

        javax.swing.GroupLayout panelProfileLayout = new javax.swing.GroupLayout(panelProfile);
        panelProfile.setLayout(panelProfileLayout);
        panelProfileLayout.setHorizontalGroup(
            panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProfileLayout.createSequentialGroup()
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProfileLayout.createSequentialGroup()
                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelProfileLayout.createSequentialGroup()
                                .addGap(415, 415, 415)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelProfileLayout.createSequentialGroup()
                                .addGap(69, 69, 69)
                                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProfileStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelProfileLayout.createSequentialGroup()
                                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(panelProfileLayout.createSequentialGroup()
                                                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel18)
                                                    .addComponent(jLabel19)
                                                    .addComponent(jLabel20))
                                                .addGap(86, 86, 86)
                                                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(txtNewPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                                    .addComponent(txtPassword)))
                                            .addGroup(panelProfileLayout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtNewPassword2)))
                                        .addGap(64, 64, 64)
                                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(panelProfileLayout.createSequentialGroup()
                                                .addComponent(jLabel26)
                                                .addGap(18, 18, 18)
                                                .addComponent(txtAddress))
                                            .addGroup(panelProfileLayout.createSequentialGroup()
                                                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(panelProfileLayout.createSequentialGroup()
                                                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel22)
                                                            .addComponent(jLabel23))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProfileLayout.createSequentialGroup()
                                                        .addComponent(jLabel24)
                                                        .addGap(35, 35, 35)))
                                                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(txtCity)
                                                    .addComponent(txtState, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                                    .addComponent(txtPostcode))))))))
                        .addGap(0, 442, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProfileLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProfileEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProfileLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelProfileLayout.setVerticalGroup(
            panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelProfileLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProfileEdit)
                    .addComponent(btnProfileLogout))
                .addContainerGap())
            .addGroup(panelProfileLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelProfileLayout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18)
                            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel26)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProfileLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(jLabel22)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelProfileLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPostcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtNewPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelProfileLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(txtNewPassword2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addComponent(lblProfileStatus)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Profile", panelProfile);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnProfileLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileLogoutActionPerformed
        lblProfileStatus.setText("Logged Out");
        this.role="";
        configuration();
        JOptionPane.showMessageDialog(null,"Logged Out", "Message", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_btnProfileLogoutActionPerformed

    private void txtShopSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtShopSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtShopSearchActionPerformed

    private void btnCartRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartRemoveActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tableCart.getModel();
        int row = tableCart.getSelectedRow();
        if (row >=0)
        {
            int response = JOptionPane.showConfirmDialog(this, "Confirm to delete the selected row?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(response==JOptionPane.YES_OPTION)
            {
                boolean canEdit = false;
                ArrayList<String> orderList = cFileHandling.readFile("order.txt");
                ArrayList<String> itemList = cFileHandling.readFile("item.txt");
                String itemName = objModel.getValueAt(row, 0).toString();
                String itemQuantity = objModel.getValueAt(row, 2).toString();
                for(int i=0; i<orderList.size();i++)
                {
                    Scanner sc = new Scanner(orderList.get(i)).useDelimiter(";");
                    sc.next();sc.next();sc.next();
                    String tempOrderUsername = sc.next();
                    String tempOrderItemName = sc.next();
                    sc.next();
                    String tempOrderItemQuantity = sc.next();
                    sc.next();
                    String tempIsPaid = sc.next();
                    
                    if(itemName.equals(tempOrderItemName)&&username.equals(tempOrderUsername)&&tempIsPaid.equals("unpaid"))
                    {
                        for(int x=0;x<itemList.size();x++)
                        {
                            Scanner sc2 = new Scanner(itemList.get(x)).useDelimiter(";");
                            String tempItemItemCategory =sc2.next();
                            String tempItemItemName = sc2.next();
                            String tempItemItemPrice=sc2.next();
                            String tempItemItemQuantity=sc2.next();
                            if(tempOrderItemName.equals(tempItemItemName))
                            {
                                int qItemQuantity = Integer.parseInt(tempItemItemQuantity.replaceAll("[^0-9.]",""));
                                int qOrderQuantity = Integer.parseInt(tempOrderItemQuantity);
                                int finalQuantity = qItemQuantity+qOrderQuantity;
                                itemList.set(x, tempItemItemCategory+";"+tempItemItemName+";"+tempItemItemPrice+";"+finalQuantity);
                                canEdit=true;
                            }
                        }
                        orderList.remove(i);
                        lblCartStatus.setText("Status : Item removed from cart!");
                    }
                } 
                if(canEdit)
                {
                    cFileHandling f = new cFileHandling();
                    for(String eachString: orderList)
                    {
                        f.newList(eachString);
                    }
                    f.saveListToFile("order.txt");
                    for(String eachString: itemList)
                    {
                        f.newList(eachString);
                    }
                    f.saveListToFile("item.txt");
                    objModel.removeRow(row);
                } 
            }
        }
        else
        {
            lblCartStatus.setText("Status : No Row Selected");
        }
    }//GEN-LAST:event_btnCartRemoveActionPerformed

    private void btnProfileEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfileEditActionPerformed
        boolean found = false;
        if(!txtPassword.getText().equals("")&&lblUsername.getText().equals(username)&&txtPassword.getText().equals(password))
        {
            if(txtNewPassword.getText().equals(txtNewPassword2.getText()))
            {
                if(!txtNewPassword.getText().equals("")&&!txtNewPassword2.getText().equals(""))
                {
                    this.password=txtNewPassword.getText();
                }
                lblProfileStatus.setText("Status: Profile Sucessfully Edited!");
                this.address=txtAddress.getText();
                this.postcode=txtPostcode.getText();
                this.city=txtCity.getText();
                this.state=txtState.getText();
                found = true;
            }
            else
            {
                lblProfileStatus.setText("Status: Make Sure New Password is same as Confirmation");
            }
        }
        else
        {
            lblProfileStatus.setText("Status: Wrong Password!");
        }
        if(found)
        {
            cFileHandling f = new cFileHandling();
            String str = role+";"+username+";"+password+";"+address+";"+postcode+";"+city+";"+state;
            f.editSpecificList("userInfo.txt",username, str);
            f.saveListToFile("userInfo.txt");
        }
    }//GEN-LAST:event_btnProfileEditActionPerformed

    private void btnShopCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShopCartActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tableShop.getModel();
        int selectedViewIndex = tableShop.getSelectedRow();
        int row = tableShop.convertRowIndexToModel(selectedViewIndex);
        if(!role.equals("customer"))
        {
            if(JOptionPane.showConfirmDialog(null,"Login to Continue?", "Please Login to Cart", JOptionPane.PLAIN_MESSAGE)==0)
            {
                this.dispose();
                jLogin login = new jLogin();
                login.setVisible(true);
            }
        }
        else
        {
            boolean canCart=false;
            if(row>=0)
            {
                cFileHandling f = new cFileHandling();
                ArrayList<String> itemList = cFileHandling.readFile("item.txt");
                for(int i=0;i<itemList.size();i++)
                {
                    Scanner sc = new Scanner(itemList.get(i)).useDelimiter(";");
                    String category = sc.next();
                    String itemName=sc.next();
                    String itemPrice=sc.next();
                    String itemQuantity=sc.next();
                    if(objModel.getValueAt(row, 1).toString().equals(itemName))
                    { 
                        Integer q = Integer.parseInt(itemQuantity.replaceAll("[^0-9.]",""));
                        int q2 = Integer.parseInt(spinnerShopQuantity.getValue().toString());
                        int check = q-q2;
                        if(check>=0)
                        {
                            canCart=true;
                            itemList.set(i, (category+";"+itemName+";"+itemPrice+";"+check));
                        }
                    }
                }
                if(canCart)
                {
                    for(String eachString: itemList)
                    {
                        f.newList(eachString);
                    }
                    f.saveListToFile("item.txt");

                    cDate date = new cDate();
                    date.calTotalPrice(objModel.getValueAt(row, 2).toString(), spinnerShopQuantity.getValue().toString());
                    String str = "null;"+date.getDate()+";"+username+";"+objModel.getValueAt(row, 1).toString()+";"+objModel.getValueAt(row, 2).toString()+";"+spinnerShopQuantity.getValue().toString()+";"+date.getTotal()+";unpaid;null;null;no;null";
                    f.addToList("order.txt", str);
                    f.saveListToFile("order.txt");
                    lblShopStatus.setText("Status: Item added to cart!");
                }
                else
                {
                    lblShopStatus.setText("Status: Item exceeds stock available!");
                }
            }
            else
            {
                lblShopStatus.setText("Status: Please select an item to cart");
            }
        }
    }//GEN-LAST:event_btnShopCartActionPerformed

    private void btnShopLoadTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShopLoadTableActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tableShop.getModel();
        objModel.setRowCount(0);
        ArrayList<String> itemList = cFileHandling.readFile("item.txt");
        for (String eachString: itemList)
        {
            Scanner sc = new Scanner(eachString).useDelimiter(";");
            String category = sc.next();
            String item = sc.next();
            String price = sc.next();
            String quantity = sc.next();
            objModel.addRow(new Object[]{category,item,price,quantity});
        }
        lblShopStatus.setText("Status : Table Loaded!");
    }//GEN-LAST:event_btnShopLoadTableActionPerformed
    
    private void btnCartRefreshTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartRefreshTableActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tableCart.getModel();
        objModel.setRowCount(0);
        ArrayList<String> lines = cFileHandling.readFile("order.txt");
        int count=0;
        for (String eachString: lines)
        {
            Scanner sc = new Scanner(eachString).useDelimiter(";");
            String orderID = sc.next();
            String date = sc.next();
            String time = sc.next();
            String tempUsername = sc.next();
            String tempItemName = sc.next();
            String tempItemPrice = sc.next();
            String tempItemQuantity = sc.next();
            String tempTotalPrice = sc.next();
            String isPaid = sc.next();
            if(tempUsername.equals(username)&&isPaid.equals("unpaid"))
            {
                objModel.addRow(new Object[]{tempItemName,tempItemPrice,tempItemQuantity,tempTotalPrice});
                count++;
            }
        }
        lblCartStatus.setText("Status : Table Loaded!");
    }//GEN-LAST:event_btnCartRefreshTableActionPerformed

    private void btnCartPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartPayActionPerformed
        ArrayList<String> orderList = cFileHandling.readFile("order.txt");
        boolean found = false;
        int response = JOptionPane.showConfirmDialog(this, "Confirm to pay?", "Confirm",JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(response==JOptionPane.YES_OPTION)
        {
            int tempID=0;
            for (int i=0;i<orderList.size();i++)
            {
                Scanner sc = new Scanner(orderList.get(i)).useDelimiter(";");
                String orderID = sc.next();
                sc.next();sc.next(); //date //time
                String tempUsername = sc.next();
                String tempItemName = sc.next();
                String tempItemPrice = sc.next();
                String tempItemQuantity = sc.next();
                String tempTotalPrice = sc.next();
                String isPaid = sc.next();
                try
                {
                   tempID=Integer.parseInt(orderID); 
                }
                catch(Exception e){}
                if(tempUsername.equals(username)&&isPaid.equals("unpaid"))
                {
                    int finalID=tempID+1;
                    cDate date = new cDate();
                    String tempString = finalID+";"+date.getDate()+";"+tempUsername+";"+tempItemName+";"+tempItemPrice+";"+tempItemQuantity+";"+tempTotalPrice+";paid;null;Packing Item;no;null";
                    orderList.set(i, tempString);
                    found = true;
                }
            }
        }
        if(found)
        {
            cFileHandling f = new cFileHandling();
            for(String eachString: orderList)
            {
                f.newList(eachString);
            }
            f.saveListToFile("order.txt");
            lblCartStatus.setText("Status : Sucessfully paid");
            found=false;
        }else{
            lblCartStatus.setText("Status : No item to paid");
        }
    }//GEN-LAST:event_btnCartPayActionPerformed

    private void btnPurchaseHistoryRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPurchaseHistoryRefreshActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tablePurchaseHistory.getModel();
        objModel.setRowCount(0);
        comboSelectID.removeAllItems();
        ArrayList<String> orderList = cFileHandling.readFile("order.txt");
        for (String eachString: orderList)
        {
            Scanner sc = new Scanner(eachString).useDelimiter(";");
            String orderID = sc.next();
            String date = sc.next();
            String time = sc.next();
            String tempUsername = sc.next();
            String tempItemName = sc.next();
            String tempItemPrice = sc.next();
            String tempItemQuantity = sc.next();
            String tempTotalPrice = sc.next();
            String isPaid = sc.next();
            sc.next();
            String deliveryStatus = sc.next();
            String feedback = sc.next();
            System.out.println(eachString);
            if(tempUsername.equals(username)&&isPaid.equals("paid"))
            {
                objModel.addRow(new Object[]{date+" "+time,orderID,tempItemName,tempItemPrice,tempItemQuantity,tempTotalPrice,deliveryStatus});
                if(deliveryStatus.equals("Delivered")&&feedback.equals("no"))
                {
                    comboSelectID.addItem(orderID);
                }
            }
        }
        lblFeedbackStatus.setText("Status: Table Loaded!");
        try
        {
            Set<String> seenValues = new HashSet<String>();
            for(int i=0;i<comboSelectID.getItemCount();i++)
            {
                String currentValue = comboSelectID.getItemAt(i);
                if (seenValues.contains(currentValue)) {
                    // If the value has already been seen, remove it from the combo box
                    comboSelectID.removeItemAt(i);
                    i--; // Decrement the index to account for the removed element
                } else {
                    // Otherwise, add the value to the set of seen values
                    seenValues.add(currentValue);
                }
            }
        }catch(Exception e){}
    }//GEN-LAST:event_btnPurchaseHistoryRefreshActionPerformed

    private void btnCartEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCartEditActionPerformed
        DefaultTableModel objModel = (DefaultTableModel) tableCart.getModel();
        int row = tableCart.getSelectedRow();
        boolean canEdit=false;
        int finalQuantity;
        if(row>=0)
        {
            ArrayList<String> itemList = cFileHandling.readFile("item.txt");
            ArrayList<String> orderList = cFileHandling.readFile("order.txt");
            for(int i=0;i<itemList.size();i++)
            {
                Scanner sc = new Scanner(itemList.get(i)).useDelimiter(";");
                String category = sc.next();
                String itemName=sc.next();
                String itemPrice=sc.next();
                String itemQuantity=sc.next();
                if(itemName.equals(objModel.getValueAt(row, 0).toString())&&!objModel.getValueAt(row,3).toString().equals(spinnerCartQuantity.getValue().toString()))
                { 
                    Integer qOri = Integer.parseInt(itemQuantity.replaceAll("[^0-9.]",""));
                    int q2 = Integer.parseInt(spinnerCartQuantity.getValue().toString());
                    int q3 = Integer.parseInt(objModel.getValueAt(row,2).toString());
                    int check = qOri-q2;
                    if(check>=0)
                    {
                        canEdit=true;
                        if(q2<Integer.parseInt(objModel.getValueAt(row,2).toString()))
                        {
                            finalQuantity = (Integer.parseInt(objModel.getValueAt(row,2).toString())-q2)+qOri;
                            itemList.set(i, (category+";"+itemName+";"+itemPrice+";"+finalQuantity));
                        }
                        else
                        {
                            finalQuantity = (q3+qOri)-q2;
                            itemList.set(i, (category+";"+itemName+";"+itemPrice+";"+finalQuantity));
                        }                        
                    }
                }
            }
            if(canEdit)
            {
                cDate date = new cDate();
                objModel.setValueAt(spinnerCartQuantity.getValue(), row, 2);
                date.calTotalPrice(spinnerCartQuantity.getValue().toString(), objModel.getValueAt(row,1).toString());
                objModel.setValueAt(date.getTotal(),row,3);
                
                cFileHandling f = new cFileHandling();
                for(String eachString: itemList)
                {
                    f.newList(eachString); 
                }
                f.saveListToFile("item.txt");
                for(int i=0; i<orderList.size();i++)
                {
                    Scanner sc = new Scanner(orderList.get(i)).useDelimiter(";");
                    String tempOrderId=sc.next();
                    String tempDate = sc.next();
                    String tempTime = sc.next();
                    String tempUsername = sc.next();
                    String tempCartItemName = sc.next();
                    String tempCartItemPrice = sc.next(); 
                    if(tempOrderId.equals("null")&&objModel.getValueAt(row,0).toString().equals(tempCartItemName)&&tempUsername.equals(username))
                    {
                        String tempString=tempOrderId+";"+date.getDate()+";"+tempUsername+";"+tempCartItemName+";"+tempCartItemPrice+";"+objModel.getValueAt(row, 2).toString()+";"+date.getTotal()+";unpaid;null;null;no;null";
                        orderList.set(i,tempString);
                    }
                }
                for(String eachString: orderList)
                {
                    f.newList(eachString); 
                }
                f.saveListToFile("order.txt");
                lblShopStatus.setText("Status: Cart updated!");
            }
            else
            {
                lblShopStatus.setText("Status: Quantity exceed stock available!");
            }
        }
    }//GEN-LAST:event_btnCartEditActionPerformed

    private void btnSubmitFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitFeedbackActionPerformed
        ArrayList<String> orderList = cFileHandling.readFile("order.txt");
        boolean canSubmit=false;
        for(int i=0;i<orderList.size();i++)
        {
            Scanner sc = new Scanner(orderList.get(i)).useDelimiter(";");
            String tempOrderID = sc.next();
            String tempDate=sc.next();
            String tempTime=sc.next();
            String tempUsername=sc.next();
            String tempItemName=sc.next();
            String tempPrice=sc.next();
            String tempQuantity=sc.next();
            String tempTotalPrice=sc.next();
            String tempIsPaid=sc.next();
            String tempDeliveryStaff=sc.next();
            String tempStatus=sc.next();
            String tempHasFeedback=sc.next();
            if(comboSelectID.getSelectedItem().equals(tempOrderID)&&tempStatus.equals("Delivered")&&tempHasFeedback.equals("no")&&!txtFeedback.getText().equals(""))
            {
                orderList.set(i, tempOrderID+";"+tempDate+";"+tempTime+";"+tempUsername+";"+tempItemName
                    +";"+tempPrice+";"+tempQuantity+";"+tempTotalPrice+";"+tempIsPaid+";"+tempDeliveryStaff+";"+tempStatus+";yes;"+txtFeedback.getText());
                canSubmit=true;
            }
        }
        if(canSubmit)
        {
            cFileHandling f = new cFileHandling();
            for(String eachString: orderList)
            {
                f.newList(eachString);
            }
            f.saveListToFile("order.txt");
            txtFeedback.setText("");
            lblFeedbackStatus.setText("Status : Feedback submitted!");
            canSubmit=false;
        }
        else
        {
            lblFeedbackStatus.setText("Status : Feedback exists!");
        }
    }//GEN-LAST:event_btnSubmitFeedbackActionPerformed

    private void txtShopSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtShopSearchKeyPressed
        DefaultTableModel table = (DefaultTableModel) tableShop.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(table);
        tableShop.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(txtShopSearch.getText().trim()));
    }//GEN-LAST:event_txtShopSearchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        //</editor-fold>
        /* Create and display the form */
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jDashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCartEdit;
    private javax.swing.JButton btnCartPay;
    private javax.swing.JButton btnCartRefreshTable;
    private javax.swing.JButton btnCartRemove;
    private javax.swing.JButton btnProfileEdit;
    private javax.swing.JButton btnProfileLogout;
    private javax.swing.JButton btnPurchaseHistoryRefresh;
    private javax.swing.JButton btnShopCart;
    private javax.swing.JButton btnShopLoadTable;
    private javax.swing.JButton btnSubmitFeedback;
    private javax.swing.JComboBox<String> comboSelectID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCartItemName;
    private javax.swing.JLabel lblCartStatus;
    private javax.swing.JLabel lblFeedbackStatus;
    private javax.swing.JLabel lblProfileStatus;
    private javax.swing.JLabel lblShopStatus;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JPanel panelCart;
    private javax.swing.JPanel panelHistory;
    private javax.swing.JPanel panelProfile;
    private javax.swing.JPanel panelShop;
    private javax.swing.JSpinner spinnerCartQuantity;
    private javax.swing.JSpinner spinnerShopQuantity;
    private javax.swing.JTable tableCart;
    private javax.swing.JTable tablePurchaseHistory;
    private javax.swing.JTable tableShop;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextArea txtFeedback;
    private javax.swing.JPasswordField txtNewPassword;
    private javax.swing.JPasswordField txtNewPassword2;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPostcode;
    private javax.swing.JTextField txtShopSearch;
    private javax.swing.JTextField txtState;
    // End of variables declaration//GEN-END:variables
}
